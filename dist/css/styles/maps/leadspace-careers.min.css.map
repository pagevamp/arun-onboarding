{"version":3,"sources":["leadspace-careers.scss","../mixins/_rem.scss"],"names":[],"mappings":"AAEA,kCAEQ,kBC6B6B,CD5B7B,iBAAU,CACV,SC2B6B,CD1B7B,MC0B6B,CDtBhC,0BATL,kCAOY,oBCwByB,CAAA,CDpBhC,8BAEO,qBCkByB,CDX5B,yBATJ,8BAIW,uBCgBqB,CAAA,CDpBhC,yCAOW,eCaqB","file":"../leadspace-careers.min.css","sourcesContent":["@import '../common-imports';\n\n.leadspace-careers {\n    .thumbnail-img {\n        max-width: rem(126px);\n        position: absolute;\n        top: rem(160px);\n        left: rem(0px);\n        @include media-breakpoint-up(xl) {\n            max-width: rem(263px);\n        }\n    }\n\n    &__content {\n        p {\n            margin-bottom: rem(20px);\n            @include media-breakpoint-up(md) {\n                margin-bottom: rem(45px);\n            }\n            &:last-child {\n                margin-bottom: rem(0px);\n            }\n        }\n    }\n}","// padding: rem(20px 25px);\n// font-size: rem(15px);\n// font-size: rem(110px !important);\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n    @if $separator== 'comma' or $separator== 'space' {\n        @return append($list, null, $separator);\n    }\n    @if function-exists('list-separator') ==true {\n        @return list-separator($list);\n    }\n    $test-list: ();\n    @each $item in $list {\n        $test-list: append($test-list, $item, space);\n    }\n    @return if($test-list==$list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n    font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n    $result: ();\n    $separator: rem-separator($values);\n    @each $value in $values {\n        @if type-of($value) == 'number' and unit($value) == 'rem' and $to== 'px' {\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\n        } @else if type-of($value) == 'number' and unit($value) == 'px' and $to== 'rem' {\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\n        } @else if type-of($value) == 'list' {\n            $value-separator: rem-separator($value);\n            $value: rem-convert($to, $value...);\n            $value: rem-separator($value, $value-separator);\n            $result: append($result, $value, $separator);\n        } @else {\n            $result: append($result, $value, $separator);\n        }\n    }\n\n    @return if(length($result) ==1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n    @if $rem-px-only {\n        @return rem-convert(px, $values...);\n    } @else {\n        @return rem-convert(rem, $values...);\n    }\n}\n\n@mixin rem($properties, $values...) {\n    @if type-of($properties) == 'map' {\n        @each $property in map-keys($properties) {\n            @include rem($property, map-get($properties, $property));\n        }\n    } @else {\n        @each $property in $properties {\n            @if $rem-fallback or $rem-px-only {\n                #{$property}: rem-convert(px, $values...);\n            }\n            @if not $rem-px-only {\n                #{$property}: rem-convert(rem, $values...);\n            }\n        }\n    }\n}\n"]}