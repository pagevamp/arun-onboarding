{"version":3,"sources":["leadspace-expertise.scss","../mixins/_rem.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAGK,gCAEO,oBC4ByB,CDrB5B,0BATJ,gCAIW,oBC0BqB,CAAA,CD9BhC,2CAOW,QCuBqB,CDtBxB,4BAKL,kBCiB6B,CDhB7B,iBAAU,CACV,YCe6B,CDd7B,OCc6B,CDLhC,yBAbD,4BAMQ,mBCYyB,CDXzB,UCWyB,CAAA,CC8BjC,0BFhDA,4BAUQ,kBCQyB,CDPzB,WCOyB,CAAA,CD/BrC,4EA8BY,mBCCyB,CDAzB,wBCAyB,CDK5B,yBApCT,4EAiCgB,iBAAW,CACX,eCHqB,CAAA","file":"../leadspace-expertise.min.css","sourcesContent":["@import '../common-imports';\n\n.leadspace-expertise {\n    &__content {\n        p {\n            margin: rem(0 0 35px);\n            @include media-breakpoint-up(xl) {\n                margin: rem(0 0 45px);\n            }\n            &:last-child {\n                margin: rem(0px);\n            }\n        }\n    }\n\n    &__thumb {\n        max-width: rem(126px);\n        position: absolute;\n        top: rem(15px);\n        right: rem(0px);\n        @include media-breakpoint-up(md) {\n            max-width: rem(194px);\n            top: rem(40px);\n        }\n        @include media-breakpoint-up(xl) {\n            max-width: rem(364px);\n            top: rem(100px);\n        }\n    }\n\n    &.img-inside-container {\n        .leadspace-expertise__thumbinside {\n            max-width: rem(166px);\n            margin-bottom: rem(-55px);\n            @include media-breakpoint-up(sm) {\n                max-width: initial;\n                margin-bottom: rem(0px);\n            }\n        }\n    }\n\n}\n\n\n\n","// padding: rem(20px 25px);\n// font-size: rem(15px);\n// font-size: rem(110px !important);\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n    @if $separator== 'comma' or $separator== 'space' {\n        @return append($list, null, $separator);\n    }\n    @if function-exists('list-separator') ==true {\n        @return list-separator($list);\n    }\n    $test-list: ();\n    @each $item in $list {\n        $test-list: append($test-list, $item, space);\n    }\n    @return if($test-list==$list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n    font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n    $result: ();\n    $separator: rem-separator($values);\n    @each $value in $values {\n        @if type-of($value) == 'number' and unit($value) == 'rem' and $to== 'px' {\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\n        } @else if type-of($value) == 'number' and unit($value) == 'px' and $to== 'rem' {\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\n        } @else if type-of($value) == 'list' {\n            $value-separator: rem-separator($value);\n            $value: rem-convert($to, $value...);\n            $value: rem-separator($value, $value-separator);\n            $result: append($result, $value, $separator);\n        } @else {\n            $result: append($result, $value, $separator);\n        }\n    }\n\n    @return if(length($result) ==1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n    @if $rem-px-only {\n        @return rem-convert(px, $values...);\n    } @else {\n        @return rem-convert(rem, $values...);\n    }\n}\n\n@mixin rem($properties, $values...) {\n    @if type-of($properties) == 'map' {\n        @each $property in map-keys($properties) {\n            @include rem($property, map-get($properties, $property));\n        }\n    } @else {\n        @each $property in $properties {\n            @if $rem-fallback or $rem-px-only {\n                #{$property}: rem-convert(px, $values...);\n            }\n            @if not $rem-px-only {\n                #{$property}: rem-convert(rem, $values...);\n            }\n        }\n    }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}